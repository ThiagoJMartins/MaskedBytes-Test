const isValidSudoku = require("../src/validateSudoku");

describe("Sudoku Validation Function", () => {
	test("Debe validar correctamente un tablero de Sudoku válido", () => {
		const board = [
			["5", "3", ".", ".", "7", ".", ".", ".", "."],
			["6", ".", ".", "1", "9", "5", ".", ".", "."],
			[".", "9", "8", ".", ".", ".", ".", "6", "."],
			["8", ".", ".", ".", "6", ".", ".", ".", "3"],
			["4", ".", ".", "8", ".", "3", ".", ".", "1"],
			["7", ".", ".", ".", "2", ".", ".", ".", "6"],
			[".", "6", ".", ".", ".", ".", "2", "8", "."],
			[".", ".", ".", "4", "1", "9", ".", ".", "5"],
			[".", ".", ".", ".", "8", ".", ".", "7", "9"],
		];

		expect(isValidSudoku(board)).toBe(true);
	});

	test("Debe invalidar un tablero de Sudoku con números repetidos en una fila", () => {
		const board = [
			["5", "3", ".", ".", "7", ".", ".", ".", "."],
			["6", ".", ".", "1", "9", "5", ".", ".", "."],
			[".", "9", "8", ".", ".", ".", ".", "6", "."],
			["8", ".", ".", ".", "6", ".", ".", ".", "3"],
			["4", ".", ".", "8", ".", "3", ".", ".", "1"],
			["7", ".", ".", ".", "2", ".", ".", ".", "6"],
			[".", "6", ".", ".", ".", ".", "2", "8", "."],
			["5", ".", ".", "4", "1", "9", ".", ".", "5"], // Error: "5" repetido en la misma columna
			[".", ".", ".", ".", "8", ".", ".", "7", "9"],
		];

		expect(isValidSudoku(board)).toBe(false);
	});

	test("Debe invalidar un tablero de Sudoku con números repetidos en una columna", () => {
		const board = [
			["5", "3", ".", ".", "7", ".", ".", ".", "."],
			["6", ".", ".", "1", "9", "5", ".", ".", "."],
			[".", "9", "8", ".", ".", ".", ".", "6", "."],
			["8", ".", ".", ".", "6", ".", ".", ".", "3"],
			["4", ".", ".", "8", ".", "3", ".", ".", "1"],
			["7", ".", ".", ".", "2", ".", ".", ".", "6"],
			[".", "6", ".", ".", ".", ".", "2", "8", "."],
			[".", ".", ".", "4", "1", "9", ".", ".", "5"],
			["8", ".", ".", ".", "8", ".", ".", "7", "9"], // Error: "8" repetido en la misma fila
		];

		expect(isValidSudoku(board)).toBe(false);
	});

	test("Debe invalidar un tablero de Sudoku con números repetidos en una subcuadrícula de 3x3", () => {
		const board = [
			["5", "3", ".", ".", "7", ".", ".", ".", "."],
			["6", ".", ".", "1", "9", "5", ".", ".", "."],
			[".", "9", "8", ".", ".", ".", ".", "6", "."],
			["8", ".", ".", ".", "6", ".", ".", ".", "3"],
			["4", ".", ".", "8", ".", "3", ".", ".", "1"],
			["7", ".", ".", ".", "2", ".", ".", ".", "6"],
			[".", "6", ".", ".", ".", ".", "2", "8", "."],
			[".", ".", ".", "4", "1", "9", ".", ".", "5"],
			["5", ".", ".", ".", "8", ".", ".", "7", "9"], // Error: "5" repetido en la subcuadrícula inferior izquierda
		];

		expect(isValidSudoku(board)).toBe(false);
	});

	test("Debe validar un tablero de Sudoku vacío", () => {
		const board = [
			[".", ".", ".", ".", ".", ".", ".", ".", "."],
			[".", ".", ".", ".", ".", ".", ".", ".", "."],
			[".", ".", ".", ".", ".", ".", ".", ".", "."],
			[".", ".", ".", ".", ".", ".", ".", ".", "."],
			[".", ".", ".", ".", ".", ".", ".", ".", "."],
			[".", ".", ".", ".", ".", ".", ".", ".", "."],
			[".", ".", ".", ".", ".", ".", ".", ".", "."],
			[".", ".", ".", ".", ".", ".", ".", ".", "."],
			[".", ".", ".", ".", ".", ".", ".", ".", "."],
		];

		expect(isValidSudoku(board)).toBe(true);
	});
});
